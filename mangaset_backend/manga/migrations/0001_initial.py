# Generated by Django 5.2.5 on 2025-08-31 13:19

import django.core.validators
import django.db.models.deletion
import manga.models.base
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('chapter_number', models.DecimalField(decimal_places=2, help_text='Allows fractional chapters like 1.5', max_digits=6)),
                ('volume_number', models.PositiveIntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('pages', models.JSONField(default=list, help_text='Array of image URLs or file paths')),
                ('page_count', models.PositiveIntegerField(default=0)),
                ('size_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('is_published', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('unlock_date', models.DateTimeField(blank=True, null=True)),
                ('unique_views', models.PositiveIntegerField(default=0)),
                ('reading_time_avg', models.PositiveIntegerField(default=0, help_text='Average reading time in seconds')),
                ('external_id', models.CharField(blank=True, max_length=100)),
                ('external_source', models.CharField(blank=True, max_length=50)),
                ('original_url', models.URLField(blank=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_release', models.DateTimeField(blank=True, null=True)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.TextField(blank=True, max_length=300)),
            ],
            options={
                'verbose_name': 'Chapter',
                'verbose_name_plural': 'Chapters',
                'ordering': ['manga', 'chapter_number'],
            },
        ),
        migrations.CreateModel(
            name='Manga',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('title', models.CharField(db_index=True, max_length=200)),
                ('alternative_titles', models.JSONField(default=dict, help_text='Alternative titles in different languages')),
                ('description', models.TextField()),
                ('synopsis', models.TextField(blank=True, help_text='Short summary')),
                ('author', models.CharField(db_index=True, max_length=100)),
                ('artist', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('ongoing', 'Ongoing'), ('completed', 'Completed'), ('hiatus', 'Hiatus'), ('cancelled', 'Cancelled')], default='ongoing', max_length=20)),
                ('publication_year', models.PositiveIntegerField(blank=True, null=True)),
                ('serialization', models.CharField(blank=True, help_text='Magazine or platform', max_length=100)),
                ('original_language', models.CharField(default='ja', max_length=10)),
                ('content_rating', models.CharField(choices=[('safe', 'Safe'), ('suggestive', 'Suggestive'), ('erotica', 'Erotica'), ('pornographic', 'Pornographic')], default='safe', max_length=20)),
                ('cover_image', models.ImageField(blank=True, upload_to='manga/covers/')),
                ('banner_image', models.ImageField(blank=True, upload_to='manga/banners/')),
                ('thumbnail', models.ImageField(blank=True, upload_to='manga/thumbnails/')),
                ('total_chapters', models.PositiveIntegerField(default=0)),
                ('total_volumes', models.PositiveIntegerField(default=0)),
                ('favorite_count', models.PositiveIntegerField(default=0)),
                ('bookmark_count', models.PositiveIntegerField(default=0)),
                ('comment_count', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_popular', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_official', models.BooleanField(default=False)),
                ('external_id', models.CharField(blank=True, help_text='External API ID (e.g., MangaDex)', max_length=100)),
                ('external_source', models.CharField(blank=True, max_length=50)),
                ('original_source_url', models.URLField(blank=True)),
                ('last_external_sync', models.DateTimeField(blank=True, null=True)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.TextField(blank=True, max_length=300)),
                ('keywords', models.CharField(blank=True, max_length=500)),
                ('last_chapter_added', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Manga',
                'verbose_name_plural': 'Manga',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField(max_length=1000)),
                ('is_spoiler', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=True)),
                ('is_edited', models.BooleanField(default=False)),
                ('is_pinned', models.BooleanField(default=False, help_text='Pinned by moderator')),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('dislikes_count', models.PositiveIntegerField(default=0)),
                ('reply_count', models.PositiveIntegerField(default=0)),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='manga.chapter')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='manga.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('manga', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='manga.manga')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color_code', models.CharField(default='#007bff', help_text='Hex color code', max_length=7)),
                ('icon', models.CharField(blank=True, help_text='FontAwesome icon class', max_length=50)),
                ('is_popular', models.BooleanField(default=False)),
                ('manga_count', models.PositiveIntegerField(default=0)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('parent_genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='manga.genre')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='chapter',
            name='manga',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='manga.manga'),
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('action_type', models.CharField(choices=[('user_register', 'User Registration'), ('user_login', 'User Login'), ('manga_create', 'Manga Created'), ('manga_update', 'Manga Updated'), ('manga_delete', 'Manga Deleted'), ('chapter_publish', 'Chapter Published'), ('comment_create', 'Comment Created'), ('rating_create', 'Rating Created'), ('admin_action', 'Admin Action'), ('system_error', 'System Error')], max_length=50)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, max_length=500)),
                ('metadata', models.JSONField(default=dict, help_text='Additional structured data')),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=20)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='manga.chapter')),
                ('manga', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='manga.manga')),
            ],
            options={
                'verbose_name': 'Activity Log',
                'verbose_name_plural': 'Activity Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MangaGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Main genre for this manga')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manga_genres', to='manga.genre')),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manga_genres', to='manga.manga')),
            ],
            options={
                'verbose_name': 'Manga Genre',
                'verbose_name_plural': 'Manga Genres',
            },
        ),
        migrations.AddField(
            model_name='manga',
            name='genres',
            field=models.ManyToManyField(blank=True, through='manga.MangaGenre', to='manga.genre'),
        ),
        migrations.CreateModel(
            name='MangaRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 10', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('review_title', models.CharField(blank=True, max_length=200)),
                ('review_text', models.TextField(blank=True, max_length=2000)),
                ('is_spoiler', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=True)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('total_votes', models.PositiveIntegerField(default=0)),
                ('would_recommend', models.BooleanField(default=True)),
                ('favorite_aspect', models.CharField(blank=True, help_text='What user liked most', max_length=100)),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='manga.manga')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manga_ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Manga Rating',
                'verbose_name_plural': 'Manga Ratings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('new_chapter', 'New Chapter'), ('manga_update', 'Manga Update'), ('comment_reply', 'Comment Reply'), ('favorite_update', 'Favorite Update'), ('system_message', 'System Message'), ('rating_like', 'Rating Liked'), ('comment_like', 'Comment Liked')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField(max_length=500)),
                ('action_url', models.CharField(blank=True, max_length=500)),
                ('is_read', models.BooleanField(default=False)),
                ('is_email_sent', models.BooleanField(default=False)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='manga.chapter')),
                ('manga', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='manga.manga')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RatingHelpful',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vote_type', models.CharField(choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful')], max_length=15)),
                ('rating', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpfulness_votes', to='manga.mangarating')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rating Helpfulness Vote',
                'verbose_name_plural': 'Rating Helpfulness Votes',
            },
        ),
        migrations.CreateModel(
            name='ReadingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_page', models.PositiveIntegerField(default=0)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('reading_status', models.CharField(choices=[('reading', 'Reading'), ('completed', 'Completed'), ('dropped', 'Dropped'), ('plan_to_read', 'Plan to Read'), ('on_hold', 'On Hold')], default='reading', max_length=20)),
                ('first_read_at', models.DateTimeField(auto_now_add=True)),
                ('last_read_at', models.DateTimeField(auto_now=True)),
                ('total_reading_time', models.PositiveIntegerField(default=0, help_text='Total reading time in seconds')),
                ('session_count', models.PositiveIntegerField(default=0)),
                ('last_device', models.CharField(blank=True, max_length=50)),
                ('last_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('rating_reminder_sent', models.BooleanField(default=False)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reading_history', to='manga.chapter')),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_history', to='manga.manga')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reading History',
                'verbose_name_plural': 'Reading Histories',
                'ordering': ['-last_read_at'],
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('data_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON')], default='string', max_length=20)),
                ('is_public', models.BooleanField(default=False, help_text='Can be accessed by non-admin users')),
                ('category', models.CharField(default='general', help_text='Setting category for organization', max_length=50)),
            ],
            options={
                'verbose_name': 'Site Setting',
                'verbose_name_plural': 'Site Settings',
                'ordering': ['category', 'key'],
                'indexes': [models.Index(fields=['key'], name='manga_sites_key_8f0df3_idx'), models.Index(fields=['category', 'key'], name='manga_sites_categor_9ceab2_idx'), models.Index(fields=['is_public'], name='manga_sites_is_publ_c7f259_idx')],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('theme', 'Theme'), ('demographic', 'Demographic'), ('format', 'Format'), ('status', 'Status'), ('content', 'Content Warning')], default='theme', max_length=20)),
                ('color_code', models.CharField(default='#6c757d', max_length=7)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('is_system', models.BooleanField(default=False, help_text='System-generated tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['type', 'name'],
                'indexes': [models.Index(fields=['type', 'usage_count'], name='manga_tag_type_e30558_idx'), models.Index(fields=['name'], name='manga_tag_name_c789dc_idx'), models.Index(fields=['type', 'name'], name='manga_tag_type_47cbd4_idx'), models.Index(fields=['is_system', 'type'], name='manga_tag_is_syst_785eca_idx')],
            },
        ),
        migrations.CreateModel(
            name='MangaTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manga_tags', to='manga.manga')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manga_tags', to='manga.tag')),
            ],
            options={
                'verbose_name': 'Manga Tag',
                'verbose_name_plural': 'Manga Tags',
            },
        ),
        migrations.AddField(
            model_name='manga',
            name='tags',
            field=models.ManyToManyField(blank=True, through='manga.MangaTag', to='manga.tag'),
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, max_length=500)),
                ('notification_enabled', models.BooleanField(default=True)),
                ('is_private', models.BooleanField(default=False)),
                ('priority', models.PositiveIntegerField(default=0, help_text='Priority order for user (0=highest priority)')),
                ('tags', models.JSONField(default=list, help_text='Custom tags added by user')),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_favorites', to='manga.manga')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Favorite',
                'verbose_name_plural': 'User Favorites',
                'ordering': ['-added_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('language_preference', models.CharField(default='en', max_length=10)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('reading_preferences', models.JSONField(default=manga.models.base.get_default_reading_preferences, help_text='User reading preferences')),
                ('notification_settings', models.JSONField(default=manga.models.base.get_default_notification_settings, help_text='Notification preferences')),
                ('privacy_settings', models.JSONField(default=manga.models.base.get_default_privacy_settings, help_text='Privacy settings')),
                ('is_verified', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('premium_expires_at', models.DateTimeField(blank=True, null=True)),
                ('total_reading_time', models.PositiveIntegerField(default=0, help_text='Total reading time in seconds')),
                ('favorite_genres', models.ManyToManyField(blank=True, help_text="User's preferred genres", to='manga.genre')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='BookmarkPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('page_number', models.PositiveIntegerField()),
                ('note', models.TextField(blank=True, max_length=200)),
                ('is_private', models.BooleanField(default=False)),
                ('bookmark_type', models.CharField(choices=[('favorite_scene', 'Favorite Scene'), ('important_plot', 'Important Plot Point'), ('funny_moment', 'Funny Moment'), ('character_development', 'Character Development'), ('other', 'Other')], default='other', max_length=254)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarked_pages', to=settings.AUTH_USER_MODEL)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarked_pages', to='manga.chapter')),
            ],
            options={
                'verbose_name': 'Bookmarked Page',
                'verbose_name_plural': 'Bookmarked Pages',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='manga_bookm_user_id_405543_idx'), models.Index(fields=['chapter', 'page_number'], name='manga_bookm_chapter_daa016_idx'), models.Index(fields=['user', 'bookmark_type'], name='manga_bookm_user_id_59e8c9_idx')],
                'unique_together': {('user', 'chapter', 'page_number')},
            },
        ),
        migrations.CreateModel(
            name='ChapterView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, max_length=500)),
                ('referrer', models.URLField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('pages_viewed', models.PositiveIntegerField(default=0)),
                ('reading_time', models.PositiveIntegerField(default=0, help_text='Reading time in seconds')),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile'), ('tablet', 'Tablet')], default='desktop', max_length=20)),
                ('country_code', models.CharField(blank=True, max_length=2)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='manga.chapter')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chapter_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chapter View',
                'verbose_name_plural': 'Chapter Views',
                'indexes': [models.Index(fields=['chapter', '-created_at'], name='manga_chapt_chapter_ae10d1_idx'), models.Index(fields=['user', '-created_at'], name='manga_chapt_user_id_8c2c6d_idx'), models.Index(fields=['ip_address', '-created_at'], name='manga_chapt_ip_addr_0aebd8_idx'), models.Index(fields=['device_type', '-created_at'], name='manga_chapt_device__a98b46_idx'), models.Index(fields=['country_code', '-created_at'], name='manga_chapt_country_c4b664_idx')],
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vote_type', models.CharField(choices=[('like', 'Like'), ('dislike', 'Dislike')], max_length=10)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='manga.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment Like',
                'verbose_name_plural': 'Comment Likes',
                'indexes': [models.Index(fields=['comment', 'vote_type'], name='manga_comme_comment_eb0615_idx'), models.Index(fields=['user', '-created_at'], name='manga_comme_user_id_a94b65_idx')],
                'unique_together': {('user', 'comment')},
            },
        ),
        migrations.AddIndex(
            model_name='genre',
            index=models.Index(fields=['is_popular', 'manga_count'], name='manga_genre_is_popu_400cde_idx'),
        ),
        migrations.AddIndex(
            model_name='genre',
            index=models.Index(fields=['parent_genre', 'display_order'], name='manga_genre_parent__252d8c_idx'),
        ),
        migrations.AddIndex(
            model_name='genre',
            index=models.Index(fields=['name'], name='manga_genre_name_3b6cbe_idx'),
        ),
        migrations.AddIndex(
            model_name='genre',
            index=models.Index(fields=['is_active', 'is_popular'], name='manga_genre_is_acti_0401f2_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['manga', '-created_at'], name='manga_comme_manga_i_d0d999_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['chapter', '-created_at'], name='manga_comme_chapter_c88128_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['parent', 'created_at'], name='manga_comme_parent__9b1378_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['user', '-created_at'], name='manga_comme_user_id_33249e_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['is_approved', '-created_at'], name='manga_comme_is_appr_7189f5_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['is_spoiler', '-created_at'], name='manga_comme_is_spoi_d85a83_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['manga', 'chapter_number', 'is_published'], name='manga_chapt_manga_i_a2a080_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['is_published', 'release_date'], name='manga_chapt_is_publ_3406fd_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['manga', 'is_published', '-chapter_number'], name='manga_chapt_manga_i_a636d2_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['-created_at'], name='manga_chapt_created_0c5af7_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['manga', '-published_at'], name='manga_chapt_manga_i_c2cce5_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['is_published', '-published_at'], name='manga_chapt_is_publ_8ba7ec_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['scheduled_release'], name='manga_chapt_schedul_c6f341_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chapter',
            unique_together={('manga', 'chapter_number')},
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['action_type', '-created_at'], name='manga_activ_action__3f9227_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['user', '-created_at'], name='manga_activ_user_id_9999b2_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['-created_at'], name='manga_activ_created_6633f4_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['severity', '-created_at'], name='manga_activ_severit_190522_idx'),
        ),
        migrations.AddIndex(
            model_name='mangagenre',
            index=models.Index(fields=['manga', 'is_primary'], name='manga_manga_manga_i_010491_idx'),
        ),
        migrations.AddIndex(
            model_name='mangagenre',
            index=models.Index(fields=['genre', 'is_primary'], name='manga_manga_genre_i_3e3ee7_idx'),
        ),
        migrations.AddIndex(
            model_name='mangagenre',
            index=models.Index(fields=['manga', 'genre'], name='manga_manga_manga_i_c77a38_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mangagenre',
            unique_together={('manga', 'genre')},
        ),
        migrations.AddIndex(
            model_name='mangarating',
            index=models.Index(fields=['manga', '-rating', '-created_at'], name='manga_manga_manga_i_bf7661_idx'),
        ),
        migrations.AddIndex(
            model_name='mangarating',
            index=models.Index(fields=['manga', 'is_approved'], name='manga_manga_manga_i_dcb37a_idx'),
        ),
        migrations.AddIndex(
            model_name='mangarating',
            index=models.Index(fields=['user', '-created_at'], name='manga_manga_user_id_871661_idx'),
        ),
        migrations.AddIndex(
            model_name='mangarating',
            index=models.Index(fields=['rating', '-helpful_votes'], name='manga_manga_rating_819f31_idx'),
        ),
        migrations.AddIndex(
            model_name='mangarating',
            index=models.Index(fields=['is_approved', '-created_at'], name='manga_manga_is_appr_3c16b0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mangarating',
            unique_together={('user', 'manga')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read', '-created_at'], name='manga_notif_user_id_a5003e_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['-created_at', 'expires_at'], name='manga_notif_created_eb57d4_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['type', '-created_at'], name='manga_notif_type_8ae9af_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'type', 'is_read'], name='manga_notif_user_id_b0be70_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['priority', '-created_at'], name='manga_notif_priorit_c3503b_idx'),
        ),
        migrations.AddIndex(
            model_name='ratinghelpful',
            index=models.Index(fields=['rating', 'vote_type'], name='manga_ratin_rating__7e522e_idx'),
        ),
        migrations.AddIndex(
            model_name='ratinghelpful',
            index=models.Index(fields=['user', '-created_at'], name='manga_ratin_user_id_09dcd2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ratinghelpful',
            unique_together={('user', 'rating')},
        ),
        migrations.AddIndex(
            model_name='readinghistory',
            index=models.Index(fields=['user', '-last_read_at'], name='manga_readi_user_id_240fa5_idx'),
        ),
        migrations.AddIndex(
            model_name='readinghistory',
            index=models.Index(fields=['manga', '-last_read_at'], name='manga_readi_manga_i_f14371_idx'),
        ),
        migrations.AddIndex(
            model_name='readinghistory',
            index=models.Index(fields=['user', 'reading_status'], name='manga_readi_user_id_7caca9_idx'),
        ),
        migrations.AddIndex(
            model_name='readinghistory',
            index=models.Index(fields=['user', 'progress_percentage'], name='manga_readi_user_id_2afa2f_idx'),
        ),
        migrations.AddIndex(
            model_name='readinghistory',
            index=models.Index(fields=['reading_status', '-last_read_at'], name='manga_readi_reading_068494_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='readinghistory',
            unique_together={('user', 'manga')},
        ),
        migrations.AddIndex(
            model_name='mangatag',
            index=models.Index(fields=['manga'], name='manga_manga_manga_i_b74b24_idx'),
        ),
        migrations.AddIndex(
            model_name='mangatag',
            index=models.Index(fields=['tag'], name='manga_manga_tag_id_7b25e8_idx'),
        ),
        migrations.AddIndex(
            model_name='mangatag',
            index=models.Index(fields=['manga', 'tag'], name='manga_manga_manga_i_8ad22c_idx'),
        ),
        migrations.AddIndex(
            model_name='mangatag',
            index=models.Index(fields=['created_by', 'tag'], name='manga_manga_created_531715_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mangatag',
            unique_together={('manga', 'tag')},
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['title'], name='manga_manga_title_b5a3dc_idx'),
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['author'], name='manga_manga_author_cd5014_idx'),
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['status', 'is_featured'], name='manga_manga_status_22a51b_idx'),
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['-average_rating', '-view_count'], name='manga_manga_average_31eaed_idx'),
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['-updated_at'], name='manga_manga_updated_82f022_idx'),
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['is_popular', 'is_trending'], name='manga_manga_is_popu_6925f4_idx'),
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['external_id', 'external_source'], name='manga_manga_externa_f258f4_idx'),
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['is_featured', '-updated_at'], name='manga_manga_is_feat_e56450_idx'),
        ),
        migrations.AddIndex(
            model_name='manga',
            index=models.Index(fields=['status', 'is_completed'], name='manga_manga_status_bac0c2_idx'),
        ),
        migrations.AddIndex(
            model_name='userfavorite',
            index=models.Index(fields=['user', '-added_at'], name='manga_userf_user_id_2899ef_idx'),
        ),
        migrations.AddIndex(
            model_name='userfavorite',
            index=models.Index(fields=['manga', '-added_at'], name='manga_userf_manga_i_610160_idx'),
        ),
        migrations.AddIndex(
            model_name='userfavorite',
            index=models.Index(fields=['user', 'is_private'], name='manga_userf_user_id_37b5f7_idx'),
        ),
        migrations.AddIndex(
            model_name='userfavorite',
            index=models.Index(fields=['user', 'notification_enabled'], name='manga_userf_user_id_5b5e38_idx'),
        ),
        migrations.AddIndex(
            model_name='userfavorite',
            index=models.Index(fields=['user', 'priority', '-added_at'], name='manga_userf_user_id_058c8d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfavorite',
            unique_together={('user', 'manga')},
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['user', 'is_verified'], name='manga_userp_user_id_c400b7_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['country'], name='manga_userp_country_3a2a37_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['is_premium', 'premium_expires_at'], name='manga_userp_is_prem_900762_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['language_preference'], name='manga_userp_languag_dad60d_idx'),
        ),
    ]
